logfile = "test.log";
log-level = "info";

resize-type = "regular";
resize-crop-center = true;

instances = (
{
	instance-name = "motion-instance";

	source = {
		id = "1-1";
		descr = "video4linux source";
		type = "v4l";
		device = "/dev/video0";
		width = 640;
		height = 480;
		pixel-format = "RGB3";
		max-fps = -1.0;
		filters = ()
	}

	motion-trigger = (
		# here we wait for motion in the video stream
		{
			id = "1-2";
			descr = "motion trigger(s)";

			noise-factor = 32;
			min-pixels-changed-percentage = 0.6;
			max-pixels-changed-percentage = 90.0;
			min-duration = 15;
			mute-duration = 5;
			pre-motion-record-duration = 15;

			warmup-duration = 10;
			max-fps = -1.0;

			trigger-plugin-file = "";
			trigger-plugin-parameter = "";

			selection-bitmap = "";

			filters-detection = [ ];
			exec-start = "";
			exec-end = "";

			targets = (
				# define any targets you wish
				# like ones that store the video stream
				# on disk in a file
			)
		}
	)
})

# output url will then be e.g.:
# http://localhost:8070/stream.mjpeg?inst=video%20input
global-http-server = (
	{
		id = "2-1";
		descr = "mjpeg out";
		listen-adapter = "0.0.0.0";
		listen-port = 8070;
		fps = 2.5;
		quality = 75;
		stylesheet = "stylesheet.css";
		time-limit = -1;
		resize-width = -1;
		resize-height = -1;
		motion-compatible = false;
		allow-admin = false;
		archive-access = false;
		is-rest = false;

                filters = (
				# this will be invoked when motion is triggered
				# in the definition above (see "motion-instance")
				# this will affect what you see in the web-
				# interface
                                {
                                        type = "marker";
					# red border around the picture
                                        marker-type = "border";
					# this "listens" to the "motion-instance"
                                        motion-source = "motion-instance";
                                        pixels-changed-percentage = 0.1;
                                        thick = 15;
                                        mode = "red-invert";
                                }
			)

	}
)
